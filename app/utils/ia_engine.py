import re
from datetime import datetime, timedelta
from django.utils import timezone


def analyser_alerte(alert):
    """
    Analyse intelligente d'une alerte de s√©curit√© avec recommandations pr√©cises
    Bas√© sur les nouvelles r√®gles Suricata 2IEM Security
    """

    # Extraction des donn√©es
    gravite = alert.severity.lower()
    type_alerte = alert.alert_type.lower()
    protocole = (alert.protocol or "").upper()
    description = (alert.description or "").lower()
    signature = (alert.signature or "").lower()
    src_ip = alert.src_ip
    dest_ip = alert.dest_ip

    # Analyse contextuelle
    verdict = ""
    recommandations = []
    niveau_risque = "FAIBLE"
    actions_immediates = []

    # === ANALYSE PAR TYPE D'ALERTE ===

    if type_alerte == "dos":
        niveau_risque = "CRITIQUE" if gravite in ["critical", "high"] else "√âLEV√â"
        verdict = "üö® ATTAQUE DOS/DDOS D√âTECT√âE"

        if "hping3" in signature or "hping" in signature:
            verdict += " - Outil Hping3 utilis√© pour saturer le r√©seau"
            recommandations.extend([
                "Bloquer imm√©diatement l'IP source",
                "V√©rifier la bande passante disponible",
                "Activer la limitation de d√©bit (rate limiting)",
                "Surveiller les autres IPs du m√™me sous-r√©seau"
            ])
        elif "syn flood" in signature:
            verdict += " - Attaque SYN Flood d√©tect√©e"
            recommandations.extend([
                "Activer SYN cookies sur les serveurs",
                "Configurer des timeouts TCP plus courts",
                "Impl√©menter un pare-feu anti-DDoS"
            ])
        elif "udp flood" in signature:
            verdict += " - Attaque UDP Flood en cours"
            recommandations.extend([
                "Filtrer le trafic UDP non essentiel",
                "V√©rifier les services UDP expos√©s",
                "Impl√©menter des r√®gles de limitation UDP"
            ])

        actions_immediates.extend([
            f"Bloquer l'IP {src_ip} imm√©diatement",
            "Alerter l'√©quipe r√©seau",
            "Documenter l'incident"
        ])

    elif type_alerte == "attaque":
        niveau_risque = "CRITIQUE"
        verdict = "üõë TENTATIVE D'ATTAQUE APPLICATIVE"

        if "sql injection" in signature or "union select" in signature:
            verdict += " - Injection SQL d√©tect√©e"
            recommandations.extend([
                "V√©rifier les logs de l'application web",
                "Auditer les requ√™tes SQL r√©centes",
                "Impl√©menter des requ√™tes pr√©par√©es",
                "Mettre √† jour le WAF (Web Application Firewall)",
                "Effectuer un scan de vuln√©rabilit√©s sur l'application"
            ])
            actions_immediates.extend([
                "Bloquer l'IP attaquante",
                "V√©rifier l'int√©grit√© de la base de donn√©es",
                "Changer les mots de passe des comptes de service"
            ])
        elif "or 1=1" in signature:
            verdict += " - Tentative de bypass d'authentification"
            recommandations.extend([
                "Auditer tous les formulaires de connexion",
                "Impl√©menter une validation stricte des entr√©es",
                "Activer la journalisation d√©taill√©e des tentatives de connexion"
            ])

    elif type_alerte == "bruteforce":
        niveau_risque = "√âLEV√â" if gravite == "high" else "MOYEN"
        verdict = "‚ö†Ô∏è ATTAQUE BRUTE FORCE D√âTECT√âE"

        if "ssh" in signature:
            verdict += " - Tentatives multiples sur SSH"
            recommandations.extend([
                "D√©sactiver l'authentification par mot de passe SSH",
                "Impl√©menter l'authentification par cl√©s",
                "Changer le port SSH par d√©faut (22)",
                "Configurer fail2ban pour SSH",
                "Limiter les connexions SSH par IP"
            ])
        elif "ftp" in signature:
            verdict += " - Attaque sur service FTP"
            recommandations.extend([
                "Migrer vers SFTP ou FTPS",
                "Impl√©menter des comptes √† privil√®ges limit√©s",
                "Configurer des timeouts de session courts"
            ])
        elif "rdp" in signature:
            verdict += " - Tentatives sur Remote Desktop"
            recommandations.extend([
                "Activer l'authentification √† deux facteurs",
                "Changer le port RDP par d√©faut (3389)",
                "Impl√©menter Network Level Authentication",
                "Restreindre l'acc√®s RDP par IP"
            ])

        actions_immediates.extend([
            f"Bloquer temporairement l'IP {src_ip}",
            "V√©rifier les logs d'authentification",
            "Alerter les administrateurs syst√®me"
        ])

    elif type_alerte == "scan":
        niveau_risque = "MOYEN" if gravite == "high" else "FAIBLE"
        verdict = "üîç ACTIVIT√â DE RECONNAISSANCE D√âTECT√âE"

        if "nmap" in signature:
            verdict += " - Scan Nmap en cours"
            recommandations.extend([
                "Identifier les services expos√©s inutilement",
                "Fermer les ports non essentiels",
                "Configurer un IPS pour bloquer les scans",
                "Surveiller les tentatives de connexion ult√©rieures"
            ])
        elif "rustscan" in signature:
            verdict += " - Scan ultra-rapide RustScan"
            recommandations.extend([
                "Impl√©menter une d√©tection de scan rapide",
                "Configurer des honeypots pour d√©tecter les attaquants"
            ])
        elif "masscan" in signature:
            verdict += " - Scan √† grande √©chelle Masscan"
            recommandations.extend([
                "V√©rifier si d'autres IPs du r√©seau sont scann√©es",
                "Impl√©menter une d√©tection de scan distribu√©"
            ])

    elif type_alerte == "malware":
        niveau_risque = "CRITIQUE"
        verdict = "ü¶† CODE MALVEILLANT D√âTECT√â"

        recommandations.extend([
            "Isoler imm√©diatement la machine infect√©e",
            "Effectuer un scan antivirus complet",
            "V√©rifier les connexions r√©seau sortantes",
            "Analyser les processus en cours d'ex√©cution",
            "Restaurer depuis une sauvegarde propre si n√©cessaire"
        ])
        actions_immediates.extend([
            "D√©connecter la machine du r√©seau",
            "Alerter l'√©quipe de s√©curit√©",
            "Documenter tous les fichiers suspects"
        ])

    elif type_alerte == "exfiltration":
        niveau_risque = "CRITIQUE"
        verdict = "üì§ TENTATIVE D'EXFILTRATION DE DONN√âES"

        if "dropbox" in signature or "drive.google" in signature:
            verdict += " - Upload vers service cloud d√©tect√©"
            recommandations.extend([
                "Bloquer l'acc√®s aux services de stockage cloud",
                "Auditer les donn√©es potentiellement compromises",
                "Impl√©menter un DLP (Data Loss Prevention)",
                "V√©rifier les permissions d'acc√®s aux fichiers sensibles"
            ])
        elif "pastebin" in signature:
            verdict += " - Upload vers Pastebin d√©tect√©"
            recommandations.extend([
                "Bloquer l'acc√®s aux sites de partage de code",
                "V√©rifier si des secrets/mots de passe ont √©t√© expos√©s"
            ])

    elif type_alerte == "fraude":
        niveau_risque = "CRITIQUE"
        verdict = "üí∞ ACTIVIT√â FRAUDULEUSE D√âTECT√âE"

        if "mobile money" in signature:
            verdict += " - Tentative de fraude Mobile Money"
            recommandations.extend([
                "Alerter imm√©diatement les services financiers",
                "Bloquer toutes les transactions suspectes",
                "V√©rifier l'int√©grit√© des syst√®mes de paiement",
                "Contacter les autorit√©s comp√©tentes"
            ])

    elif type_alerte == "exploit":
        niveau_risque = "CRITIQUE"
        verdict = "üí• TENTATIVE D'EXPLOITATION D√âTECT√âE"

        recommandations.extend([
            "Identifier la vuln√©rabilit√© exploit√©e",
            "Appliquer les correctifs de s√©curit√©",
            "V√©rifier si l'exploitation a r√©ussi",
            "Effectuer une analyse forensique"
        ])

    # === ANALYSE CONTEXTUELLE AVANC√âE ===

    # Analyse temporelle
    now = timezone.now()
    if alert.detected_on:
        if alert.detected_on.hour < 6 or alert.detected_on.hour > 22:
            verdict += " ‚è∞ [HORS HEURES OUVRABLES - SUSPECT]"
            niveau_risque = "√âLEV√â" if niveau_risque == "MOYEN" else niveau_risque

    # Analyse g√©ographique (IP priv√©es vs publiques)
    if src_ip and dest_ip:
        try:
            import ipaddress
            src_private = ipaddress.ip_address(src_ip).is_private
            dest_private = ipaddress.ip_address(dest_ip).is_private

            if not src_private and dest_private:
                verdict += " üåê [ATTAQUE EXTERNE VERS INTERNE]"
                niveau_risque = "CRITIQUE"
            elif src_private and not dest_private:
                verdict += " üì° [TRAFIC SORTANT SUSPECT]"
        except:
            pass

    # Analyse protocolaire
    if protocole:
        if protocole in ["FTP", "TELNET", "HTTP"]:
            verdict += f" üîì [PROTOCOLE NON S√âCURIS√â: {protocole}]"
            recommandations.append(f"Migrer vers une version s√©curis√©e de {protocole}")

    # === CONSTRUCTION DU RAPPORT FINAL ===

    rapport = f"""
ü§ñ === ANALYSE IA 2IEM SECURITY ===

üéØ VERDICT: {verdict}
üìä NIVEAU DE RISQUE: {niveau_risque}
üïí ANALYS√â LE: {now.strftime('%d/%m/%Y √† %H:%M:%S')}

üìã D√âTAILS TECHNIQUES:
‚Ä¢ IP Source: {src_ip}
‚Ä¢ IP Destination: {dest_ip}
‚Ä¢ Protocole: {protocole}
‚Ä¢ Gravit√©: {gravite.upper()}
‚Ä¢ Type: {type_alerte.upper()}

‚ö° ACTIONS IMM√âDIATES:"""

    if actions_immediates:
        for action in actions_immediates:
            rapport += f"\n‚Ä¢ {action}"
    else:
        rapport += "\n‚Ä¢ Surveillance continue recommand√©e"

    rapport += "\n\nüí° RECOMMANDATIONS:"
    if recommandations:
        for rec in recommandations:
            rapport += f"\n‚Ä¢ {rec}"
    else:
        rapport += "\n‚Ä¢ Aucune action sp√©cifique requise pour le moment"

    # Ajout de conseils g√©n√©raux selon le niveau de risque
    if niveau_risque == "CRITIQUE":
        rapport += "\n\nüö® ALERTE CRITIQUE: Intervention imm√©diate requise!"
    elif niveau_risque == "√âLEV√â":
        rapport += "\n\n‚ö†Ô∏è RISQUE √âLEV√â: Surveillance renforc√©e recommand√©e"
    elif niveau_risque == "MOYEN":
        rapport += "\n\nüîç RISQUE MOD√âR√â: V√©rification recommand√©e"
    else:
        rapport += "\n\n‚úÖ RISQUE FAIBLE: Surveillance normale"

    rapport += "\n\nüõ°Ô∏è 2IEM Security - Protection Intelligente"

    return rapport.strip()


def get_attack_trend_analysis(alert):
    """Analyse les tendances d'attaques pour une IP donn√©e"""
    try:
        from app.models import Alert
        from datetime import timedelta

        # Recherche des alertes similaires dans les derni√®res 24h
        recent_alerts = Alert.objects.filter(
            src_ip=alert.src_ip,
            detected_on__gte=timezone.now() - timedelta(hours=24)
        ).exclude(id=alert.id)

        if recent_alerts.count() > 5:
            return f"\n PATTERN D√âTECT√â: {recent_alerts.count()} alertes similaires en 24h"
        elif recent_alerts.count() > 0:
            return f"\n HISTORIQUE: {recent_alerts.count()} alerte(s) r√©cente(s) de cette IP"

        return ""
    except:
        return ""