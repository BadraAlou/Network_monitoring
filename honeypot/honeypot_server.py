import socket
import threading
import datetime
import os
import django
import sys
import time
import logging

# Configuration Django
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "Network_monitoring.settings")
django.setup()

from app.models import HoneypotLog

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('honeypot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configuration compl√®te des honeypots avec tous les protocoles standards
HONEYPOTS = [
    # Services SSH
    {
        "port": 22,
        "service": "SSH",
        "message": "üîê SSH Access Denied - 2IEM_Security\n"
                   "Tentative de connexion SSH d√©tect√©e et enregistr√©e.\n"
                   "Votre adresse IP a √©t√© signal√©e aux autorit√©s comp√©tentes.\n"
                   "Connection terminated.\n"
    },
    {
        "port": 2222,
        "service": "SSH",
        "message": "üîê SSH Honeypot - 2IEM_Security\n"
                   "Tentative SSH d√©tect√©e par notre syst√®me de s√©curit√©.\n"
                   "Toutes vos tentatives sont enregistr√©es et analys√©es.\n"
                   "Vous ne passerez jamais notre protection.\n"
    },

    # Services FTP
    {
        "port": 21,
        "service": "FTP",
        "message": "220 2IEM_Security FTP Honeypot\r\n"
                   "üìÅ Tentative FTP pi√©g√©e et enregistr√©e.\r\n"
                   "Vos mouvements sont surveill√©s en temps r√©el.\r\n"
                   "Acc√®s refus√© d√©finitivement.\r\n"
                   "221 Goodbye.\r\n"
    },
    {
        "port": 2121,
        "service": "FTP",
        "message": "220 Alternative FTP - 2IEM_Security\r\n"
                   "üìÅ Service FTP alternatif - Acc√®s non autoris√©.\r\n"
                   "Tentative d'intrusion d√©tect√©e et signal√©e.\r\n"
                   "221 Connection closed.\r\n"
    },

    # Services HTTP/HTTPS
    {
        "port": 80,
        "service": "HTTP",
        "message": "üåê Tentative HTTP capt√©e par 2IEM_Security.\n"
                   "Vous √™tes observ√© et nos agents ouvrent une enqu√™te.\n"
                   "Votre activit√© malveillante a √©t√© enregistr√©e.\n"
                   "Acc√®s bloqu√© d√©finitivement."
    },
    {
        "port": 8080,
        "service": "HTTP",
        "message": "üåê HTTP Proxy - 2IEM_Security\n"
                   "Tentative d'acc√®s au proxy HTTP d√©tect√©e.\n"
                   "Votre IP est maintenant sous surveillance.\n"
                   "Toute activit√© suspecte sera signal√©e."
    },
    {
        "port": 443,
        "service": "HTTPS",
        "message": "üîí HTTPS Service - 2IEM_Security\n"
                   "Tentative de connexion HTTPS non autoris√©e.\n"
                   "Certificat invalide - Connexion refus√©e.\n"
                   "Incident de s√©curit√© enregistr√©."
    },
    {
        "port": 8443,
        "service": "HTTPS",
        "message": "üîí Alternative HTTPS - 2IEM_Security\n"
                   "Service HTTPS alternatif - Acc√®s interdit.\n"
                   "Tentative d'intrusion SSL/TLS d√©tect√©e.\n"
                   "Connexion termin√©e par s√©curit√©."
    },

    # Services TELNET
    {
        "port": 23,
        "service": "TELNET",
        "message": "üìü TELNET - 2IEM_Security\r\n"
                   "Tentative TELNET d√©tect√©e - Protocole obsol√®te.\r\n"
                   "Connexion non s√©curis√©e refus√©e.\r\n"
                   "Votre activit√© a √©t√© enregistr√©e.\r\n"
    },
    {
        "port": 2323,
        "service": "TELNET",
        "message": "üìü Alternative TELNET - 2IEM_Security\r\n"
                   "Service TELNET alternatif - Acc√®s refus√©.\r\n"
                   "Protocole non s√©curis√© d√©tect√©.\r\n"
                   "Connexion ferm√©e par s√©curit√©.\r\n"
    },

    # Services SMTP
    {
        "port": 25,
        "service": "SMTP",
        "message": "220 2IEM_Security SMTP Honeypot\r\n"
                   "üìß Tentative SMTP d√©tect√©e et bloqu√©e.\r\n"
                   "Service de messagerie prot√©g√©.\r\n"
                   "Votre IP a √©t√© signal√©e pour spam.\r\n"
                   "221 Bye\r\n"
    },
    {
        "port": 587,
        "service": "SMTP",
        "message": "220 SMTP Submission - 2IEM_Security\r\n"
                   "üìß Service SMTP submission - Acc√®s refus√©.\r\n"
                   "Authentification requise non fournie.\r\n"
                   "Tentative d'envoi de spam d√©tect√©e.\r\n"
                   "221 Closing connection\r\n"
    },

    # Services POP3/IMAP
    {
        "port": 110,
        "service": "POP3",
        "message": "+OK 2IEM_Security POP3 Honeypot\r\n"
                   "üì¨ Tentative POP3 d√©tect√©e - Acc√®s refus√©.\r\n"
                   "Service de messagerie prot√©g√©.\r\n"
                   "Votre tentative a √©t√© enregistr√©e.\r\n"
                   "+OK Bye\r\n"
    },
    {
        "port": 143,
        "service": "IMAP",
        "message": "* OK 2IEM_Security IMAP Honeypot\r\n"
                   "üìÆ Tentative IMAP d√©tect√©e et bloqu√©e.\r\n"
                   "Acc√®s aux emails non autoris√©.\r\n"
                   "Incident de s√©curit√© enregistr√©.\r\n"
                   "* BYE Closing connection\r\n"
    },

    # Services DNS
    {
        "port": 53,
        "service": "DNS",
        "message": "üåê DNS Service - 2IEM_Security\n"
                   "Tentative d'acc√®s DNS d√©tect√©e.\n"
                   "Requ√™te DNS malveillante bloqu√©e.\n"
                   "Votre activit√© a √©t√© signal√©e."
    },

    # Services de base de donn√©es
    {
        "port": 3306,
        "service": "MySQL",
        "message": "üóÑÔ∏è MySQL Database - 2IEM_Security\n"
                   "Tentative d'acc√®s MySQL d√©tect√©e.\n"
                   "Base de donn√©es prot√©g√©e - Acc√®s refus√©.\n"
                   "Tentative d'intrusion enregistr√©e."
    },
    {
        "port": 5432,
        "service": "PostgreSQL",
        "message": "üóÑÔ∏è PostgreSQL Database - 2IEM_Security\n"
                   "Tentative d'acc√®s PostgreSQL d√©tect√©e.\n"
                   "Base de donn√©es s√©curis√©e - Connexion refus√©e.\n"
                   "Incident de s√©curit√© signal√©."
    },
    {
        "port": 1433,
        "service": "MSSQL",
        "message": "üóÑÔ∏è SQL Server - 2IEM_Security\n"
                   "Tentative d'acc√®s SQL Server d√©tect√©e.\n"
                   "Base de donn√©es Microsoft prot√©g√©e.\n"
                   "Votre IP a √©t√© blacklist√©e."
    },
    {
        "port": 27017,
        "service": "MongoDB",
        "message": "üóÑÔ∏è MongoDB Database - 2IEM_Security\n"
                   "Tentative d'acc√®s MongoDB d√©tect√©e.\n"
                   "Base NoSQL prot√©g√©e - Acc√®s interdit.\n"
                   "Activit√© malveillante enregistr√©e."
    },

    # Services de partage de fichiers
    {
        "port": 445,
        "service": "SMB",
        "message": "üìÇ SMB/CIFS Service - 2IEM_Security\n"
                   "Tentative d'acc√®s SMB d√©tect√©e.\n"
                   "Partage de fichiers prot√©g√©.\n"
                   "Tentative d'intrusion Windows signal√©e."
    },
    {
        "port": 139,
        "service": "NetBIOS",
        "message": "üìÇ NetBIOS Service - 2IEM_Security\n"
                   "Tentative NetBIOS d√©tect√©e et bloqu√©e.\n"
                   "Service de noms Windows prot√©g√©.\n"
                   "Votre activit√© a √©t√© enregistr√©e."
    },

    # Services VPN/Remote
    {
        "port": 1723,
        "service": "PPTP",
        "message": "üîê PPTP VPN - 2IEM_Security\n"
                   "Tentative de connexion VPN PPTP d√©tect√©e.\n"
                   "Service VPN prot√©g√© - Acc√®s refus√©.\n"
                   "Tentative d'intrusion VPN signal√©e."
    },
    {
        "port": 3389,
        "service": "RDP",
        "message": "üñ•Ô∏è Remote Desktop - 2IEM_Security\n"
                   "Tentative RDP d√©tect√©e et bloqu√©e.\n"
                   "Bureau √† distance prot√©g√©.\n"
                   "Tentative d'acc√®s Windows signal√©e."
    },
    {
        "port": 5900,
        "service": "VNC",
        "message": "üñ•Ô∏è VNC Service - 2IEM_Security\n"
                   "Tentative VNC d√©tect√©e - Acc√®s refus√©.\n"
                   "Contr√¥le √† distance prot√©g√©.\n"
                   "Incident de s√©curit√© enregistr√©."
    },

    # Services de monitoring/gestion
    {
        "port": 161,
        "service": "SNMP",
        "message": "üìä SNMP Service - 2IEM_Security\n"
                   "Tentative SNMP d√©tect√©e et bloqu√©e.\n"
                   "Service de monitoring prot√©g√©.\n"
                   "Votre scan r√©seau a √©t√© d√©tect√©."
    },
    {
        "port": 162,
        "service": "SNMP-Trap",
        "message": "üìä SNMP Trap - 2IEM_Security\n"
                   "Tentative SNMP Trap d√©tect√©e.\n"
                   "Service de notification prot√©g√©.\n"
                   "Activit√© suspecte enregistr√©e."
    },

    # Services de jeux/applications
    {
        "port": 25565,
        "service": "Minecraft",
        "message": "üéÆ Minecraft Server - 2IEM_Security\n"
                   "Tentative d'acc√®s serveur Minecraft.\n"
                   "Serveur de jeu prot√©g√© - Acc√®s refus√©.\n"
                   "Votre tentative a √©t√© enregistr√©e."
    },

    # Ports hauts couramment scann√©s
    {
        "port": 8000,
        "service": "HTTP-Alt",
        "message": "üåê HTTP Alternative - 2IEM_Security\n"
                   "Service HTTP alternatif - Acc√®s interdit.\n"
                   "Tentative de contournement d√©tect√©e.\n"
                   "Votre IP est maintenant surveill√©e."
    },
    {
        "port": 9000,
        "service": "HTTP-Mgmt",
        "message": "üåê HTTP Management - 2IEM_Security\n"
                   "Interface de gestion prot√©g√©e.\n"
                   "Tentative d'acc√®s administrateur d√©tect√©e.\n"
                   "Incident de s√©curit√© signal√©."
    },
]


def handle_client(client_socket, address, port, service, message):
    """G√®re chaque connexion client sur un honeypot"""
    ip = address[0]
    timestamp = datetime.datetime.now()

    logger.info(f"üî¥ Tentative de connexion {service} de {ip}:{address[1]} sur port {port}")

    try:
        # Enregistrement en base de donn√©es
        HoneypotLog.objects.create(
            ip_address=ip,
            port=port,
            service=service,
            message_sent=message.strip(),
            detected_on=timestamp
        )
        logger.info(f"‚úÖ Log enregistr√© pour {ip} ({service} port {port})")

    except Exception as e:
        logger.error(f"‚ùå Erreur d'enregistrement en base pour {ip}: {e}")

    try:
        # Envoi de la r√©ponse selon le protocole
        if service in ["HTTP", "HTTP-Alt", "HTTP-Mgmt", "HTTPS"]:
            # R√©ponse HTTP format√©e
            response = (
                f"HTTP/1.1 403 Forbidden\r\n"
                f"Server: 2IEM_Security_Honeypot\r\n"
                f"Content-Type: text/plain\r\n"
                f"Content-Length: {len(message)}\r\n"
                f"Connection: close\r\n\r\n"
                f"{message}"
            )
            client_socket.send(response.encode('utf-8'))

        elif service in ["FTP"]:
            # R√©ponse FTP avec codes de statut
            client_socket.send(message.encode('utf-8'))

        elif service in ["SMTP"]:
            # R√©ponse SMTP avec codes de statut
            client_socket.send(message.encode('utf-8'))

        elif service in ["POP3"]:
            # R√©ponse POP3 avec format correct
            client_socket.send(message.encode('utf-8'))

        elif service in ["IMAP"]:
            # R√©ponse IMAP avec format correct
            client_socket.send(message.encode('utf-8'))

        else:
            # R√©ponse g√©n√©rique pour autres services
            client_socket.send(message.encode('utf-8'))

        logger.info(f"üì® Message {service} envoy√© √† {ip}")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è √âchec envoi message √† {ip}: {e}")

    finally:
        try:
            client_socket.close()
        except:
            pass


def start_honeypot(port, service, message):
    """D√©marre un honeypot sur un port sp√©cifique"""
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    try:
        server.bind(('0.0.0.0', port))
        server.listen(10)  # Augment√© pour plus de connexions simultan√©es
        logger.info(f"üéØ Honeypot {service} actif sur le port {port}")

    except Exception as e:
        logger.error(f"‚ùå Impossible de d√©marrer {service} sur port {port}: {e}")
        return

    while True:
        try:
            client, addr = server.accept()
            # Timeout pour √©viter les connexions qui tra√Ænent
            client.settimeout(30)

            # Lancement du thread pour g√©rer le client
            client_thread = threading.Thread(
                target=handle_client,
                args=(client, addr, port, service, message),
                daemon=True
            )
            client_thread.start()

        except Exception as e:
            logger.error(f"‚ùå Erreur acceptation connexion sur {service}:{port}: {e}")
            time.sleep(1)  # Pause courte en cas d'erreur


def main():
    """Fonction principale de lancement des honeypots"""
    logger.info("üöÄ Lancement du syst√®me Honeypot multi-services 2IEM_Security")
    logger.info(f"üìä Configuration de {len(HONEYPOTS)} honeypots")

    # Statistiques des services
    services_count = {}
    for honeypot in HONEYPOTS:
        service = honeypot["service"]
        services_count[service] = services_count.get(service, 0) + 1

    logger.info("üìã Services configur√©s:")
    for service, count in services_count.items():
        logger.info(f"   - {service}: {count} port(s)")

    # Lancement de tous les honeypots
    threads = []
    for honeypot in HONEYPOTS:
        thread = threading.Thread(
            target=start_honeypot,
            args=(honeypot["port"], honeypot["service"], honeypot["message"]),
            daemon=True
        )
        thread.start()
        threads.append(thread)
        time.sleep(0.1)  # Petite pause entre les d√©marrages

    logger.info("‚úÖ Tous les honeypots sont d√©marr√©s")
    logger.info("üõ°Ô∏è Syst√®me de surveillance actif - Appuyez sur Ctrl+C pour arr√™ter")

    try:
        # Maintenir le programme en vie
        while True:
            time.sleep(60)
            # Log p√©riodique pour confirmer que le syst√®me fonctionne
            active_threads = sum(1 for t in threads if t.is_alive())
            logger.info(f"Syst√®me actif - {active_threads}/{len(threads)} honeypots en fonctionnement")

    except KeyboardInterrupt:
        logger.info("üõë Arr√™t du syst√®me honeypot demand√©")
        logger.info("üëã 2IEM_Security Honeypot System - Arr√™t en cours...")


if __name__ == "__main__":
    main()